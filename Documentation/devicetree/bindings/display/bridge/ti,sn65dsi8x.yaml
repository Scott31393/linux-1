# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/display/bridge/ti,sn65dsi8x.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: TI SN65DSI83/84/85 MIPI DSI to LVDS bridge bindings

maintainers:
  - Jagan Teki <jagan@amarulasolutions.com>

description: |
  SN65DSI83/84/85 devices are MIPI DSI to LVDS based bridge controller
  IC's from Texas Instruments.

  SN65DSI83 - Single Channel DSI to Single-link LVDS bridge
  SN65DSI84 - Single Channel DSI to Dual-link LVDS bridge
  SN65DSI85 - Dual Channel DSI to Dual-link LVDS bridge

  Bridge decodes MIPI DSI 18bpp RGB666 and 240bpp RG888 packets and
  converts the formatted video data stream to a FlatLink compatible
  LVDS output operating at pixel clocks operating from 25 MHx to
  154 MHz.

properties:
  compatible:
    enum:
      - ti,sn65dsi83
      - ti,sn65dsi84

  reg:
    const: 0x2c

  enable-gpios:
    maxItems: 1
    description: GPIO specifier for bridge enable pin (active high).

  ports:
    $ref: /schemas/graph.yaml#/properties/ports

    properties:
      port@0:
        $ref: /schemas/graph.yaml#/properties/port
        description: |
          DSI Input. The remote endpoint phandle should be a
          reference to a valid mipi_dsi_host device node.

      port@1:
        $ref: /schemas/graph.yaml#/properties/port
        description: |
          Video port for LVDS output (panel or connector).

    required:
      - port@0
      - port@1

required:
  - compatible
  - reg
  - enable-gpios
  - ports

additionalProperties: false

examples:
  - |
    #include <dt-bindings/gpio/gpio.h>

    dsi {
       #address-cells = <1>;
       #size-cells = <0>;

       ports {
           #address-cells = <1>;
           #size-cells = <0>;

           port@0 {
               reg = <0>;
               dsi_in: endpoint {
                   remote-endpoint = <&ltdc_ep0_out>;
               };
           };

           port@1 {
               reg = <1>;
               dsi_out: endpoint {
                   remote-endpoint = <&bridge_in>;
                   data-lanes = <0 1>;
               };
           };
       };
    };

    i2c6 {
       #address-cells = <1>;
       #size-cells = <0>;

       bridge@2c {
           compatible = "ti,sn65dsi84";
           reg = <0x2c>;
           enable-gpios = <&gpiof 15 GPIO_ACTIVE_HIGH>;

           ports {
               #address-cells = <1>;
               #size-cells = <0>;

               port@0 {
                   reg = <0>;
                   bridge_in: endpoint {
                        remote-endpoint = <&dsi_out>;
                   };
               };

               port@1 {
                   reg = <1>;
                   bridge_out: endpoint {
                        remote-endpoint = <&panel_in_lvds>;
                   };
               };
           };
       };
    };
